<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python关键字、标识符、变量]]></title>
    <url>%2F8029f1fe%2F</url>
    <content type="text"><![CDATA[关键字关键字的含义和其他语言都一样：具有特殊含义的特殊字。在python中，所有的关键字都要区分大小写，这一点真的好严谨哦。。 给test变量赋值一个为真的值： 12345&gt;&gt;&gt; test = True #程序未报错&gt;&gt;&gt; test = true #程序报错Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;NameError: name 'true' is not defined 具体他的关键字都是咋写的，python有这么一个统计，在python交互模式下： 12345678910111213&gt;&gt;&gt; help("keywords")Here is a list of the Python keywords. Enter any keyword to get more help.False class from orNone continue global passTrue def if raiseand del import returnas elif in tryassert else is whileasync except lambda withawait finally nonlocal yieldbreak for not 也可以这样： 12345&gt;&gt;&gt; keyword.kwlist['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 如果官方的关键字有变动，去除或者新增，就从新导入即可：&gt;&gt;&gt; import keyword]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello,Pyth]]></title>
    <url>%2Fd6c50ec3%2F</url>
    <content type="text"><![CDATA[打卡今天编写第一个Python程序，首先应该知道Python可以是交互式编程（带&gt;&gt;&gt;），也可以是命令行运行.py文件，也就是脚本编程。 基本语法进到Python交互模式，命令行直接python回车： 123456teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ pythonPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; 1&gt;&gt;&gt; print("hello,python") 直接输出 1hello,python 上面的是在python交互模式下写的程序，还有一种就是将所写的代码放在python脚本内，然后命令行值行它。建立hello.py文件，将上面的代码保存，然后在命令行值行这个文件。 123teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ python hello.pyhello,python print() 可以输出任何东西，但如果想要输入，Python提供了一个方法 input(),输入input()并按下回车后，Python交互式命令行就在等待输入了。这时，输入任意字符，然后按回车后完成输入。 123&gt;&gt;&gt; input()test'test' 在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量： 123name="zhangsan" #name就是一个字符串sex=18 #sex就是一个整型... 上面的代码为了好理解点，可以将它赋值给一个变量，即： 1234&gt;&gt;&gt; name = input("你叫什么？");print("hello",name) 回车你叫什么？Python输出：hello Python 同样，也可以将代码保存在Python脚本内运行。 总结：Python语法和其他语言都有很多的相似之处，比如变量命名，变量名必须是大小写英文、数字和_的组合，且不能用数字开头 1234Python：name = "xxxxx";PHP: $name = "xxxx";Java: String name="xxxx";.... 最大的区别就是Python的代码不会用{}标识，而是用缩进的方法来规范，而且这个缩进的大小也是相当严谨哦。。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习日记]]></title>
    <url>%2F7c404c2f%2F</url>
    <content type="text"><![CDATA[为什么要学习?听过这么一句话， 比你优秀的人不可怕，可怕的是比你优秀的人比你更努力。对我而言，这句话同样具有很大的杀伤力。因为不进步，就等于落后。 为什么选择python?火。 安装篇我安装的是目前最新版本Python 3.7.3，传送门，选择 Download Windows x86 executable installer大概25M左右。下载好之后就运行文件，需要勾选Add Python 3.7 to PATH，即配置环境变量，忘记勾选的话就需要手动去配置环境变量了，否则，从新安装即可。然后点“Install Now”即可完成安装。我建议在windows装个 git，不然后面用windows的命令提示符操作好变扭，反正我是用不惯。随便创建一个学习python用的文件夹 D:\python，在这个文件夹下面运行 Git Bash，然后运行 python –version 如果能显示python 版本号，即安装成功。 123teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ python --versionPython 3.7.3 然后在这块儿输出： 123teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ print("hello py")bash: syntax error near unexpected token `"hello py"' 报错，不能这么执行，原因，我们现在是在git的命令行模式，需要开启python的交互模式，如果在windows命令行： 1234C:\Users\teemitop&gt;pythonPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; 出现三个大于号，才进入python交互模式，如果用的是Git Bash，必须通过winpty python 或者python -i进入。如果嫌两个命令有点长，繁琐，可以给给它配置个别名：去D:\Program Files\Git\etc，自行查找，找到这个文件** bash.bashrc** 用编辑器打开，在文末加入 alias python=&#39;winpty python &#39;，然后重新打开 Git Bash，直接运行python 即可进入python交互模式 123456teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ pythonPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; 退出的时候直接X掉或者exit();后面的括号、分号都不能丢，好严谨哦。。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ocean 中文文档]]></title>
    <url>%2Fe3058817%2F</url>
    <content type="text"><![CDATA[Ocean 是基于 Hexo 默认主题 landscape 的功能，设计的一款支持移动设备的主题，并且集成了 Gitalk 评论功能。 由于我是一枚 Designer 而不是 Coder，所以 欢迎指正！ 如果你喜欢 Ocean 可以 点 这里下载，主题默认使用 Logo 是 Hexo 的 Logo，如果你也喜欢并且想使用我的这个 Shark（小鲨鱼）Logo 的话，那么希望你能给 Ocean 一个 Star，如果你还把页面底部 theme 的作者改为你自己的名字的话，那么更应该给 Ocean 一个 Star 了！ 这里 Clone 了 Markdown 的基本语法在 Ocean 中的展现形式，可能会让你更快速的认知到 Ocean 是否适合你的 Hexo ！ 安装$ git clone https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean 启用目录 theme 中 _config.yml 选择 theme: ocean theme: ocean 更新12$ cd themes/ocean$ git pull 配置默认开启相册与关于菜单，关闭 Gitalk 评论功能，需要的同学 true 就可以了，关于 Gitalk 的使用 过程中遇到各种报错，有同样问题的，或者有兴趣想要了解 Gitalk 可以移步看一看。 Menumenu: 主页: / 归档: /archives 相册: /gallery 关于: /about rss: /atom.xml # Miscellaneous favicon: /favicon.ico brand: /images/hexo.svg # Ocean 主页视频 # 多种格式的视频用于支持不同的浏览器，这里只需要配置好路径，前提是我把视频相关文件统一目录存放。 ocean: overlay: true # 可选，false 则 Ocean 视频下方的笔触式遮盖不显示 path: /images/ocean/ # 视频统一存放路径，格式 mp4/ogg/webm brand: /images/hexo-inverted.svg # 可选，一个小 Logo # 内容 excerpt_link: 阅读全文... share_text: 分享 nav_text: page_prev: 上一页 page_next: 下一页 post_prev: 前一篇 post_next: 后一篇 # fancybox fancybox: true # Local search search_text: 搜索 # Gitalk gitalk: enable: false # 默认关闭评论 开启：true clientID: # 申请 GitHub Application 网页上对应的 Client ID 与 Client Secret 参数 clientSecret: # 同上 repo: # 创建的仓库名称 owner: # Github ID admin: # Github IDOcean 使用了 feathericon 图标库，菜单中的图标定义在“CSS source / css / _partial / navbar.styl”中，可根据需要进行更改或添加。如果你不需要开启相册与关于菜单，需要删除或者注销掉他们的图标，如下边的示例： .nav-item &amp;:nth-child(1) // 主页 .nav-item-link &amp;::before content &apos;\f12f&apos; &amp;:nth-child(2) // 归档 .nav-item-link &amp;::before content &apos;\f12a&apos; //&amp;:nth-child(3) // 相册 // .nav-item-link // &amp;::before // content &apos;\f1a9&apos; //&amp;:nth-child(4) // 关于 // .nav-item-link // &amp;::before // content &apos;\f174&apos;插件 本地搜索 - 使用插件 hexo-generator-search 生成 xml 索引文件。 $ npm install hexo-generator-searchdb --save 然后为 hexo 的配置文件 _config.yml 添加插件配置（注意：不是主题的配置文件，主题配置文件 Ocean 已经配置完成）： # hexo-generator-searchdb@1.0.8 search: path: search.xml field: post format: html content: true RSS - 如果您想启用RSS，还需要 hexo-generate-feed 插件，仅安装即可，Ocean 已经配置完成。 $ npm install hexo-generator-feed --save 文章封面图需要写在 markdown 的 head 部分 title: Post name photos: [ [&quot;img_url&quot;], [&quot;img_url&quot;] ]需要注意的是，这里说的封面图并不是文章配图，文章配图按照 markdown 的语法写就好了！ 相册首先需要创建一个 page ，关于页面也一样需要创建。 $ hexo new page gallery 然后在编辑 markdown 的时候需要写在 head 部分，这种写法可能不是特别特别的好，希望能有更好的方法。 title: Gallery albums: [ [&quot;img_url&quot;,&quot;img_caption&quot;], [&quot;img_url&quot;,&quot;img_caption&quot;] ] ---]]></content>
      <tags>
        <tag>Ocean</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F4a17b156%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Hello</tag>
        <tag>World</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
