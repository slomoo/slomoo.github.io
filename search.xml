<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python数据类型]]></title>
    <url>%2F9f07ae5c%2F</url>
    <content type="text"><![CDATA[周五了鸭~ 鲁鲁约起来哈哈哈哈哈哈哈哈…… Python数据类型的定义和其他语言都一样，都是来规范一个数据的的上限和下限。不同的是在Python中，是根据语法来断定一个数据的数据类型。。比如用整型就是非十进制的数字，带小数点的就为浮点型，字符串就是用引号括起来的，好像和拍黄片差不多哦。。分别学习一下吧！ 布尔型(Booleans)几乎每种语言都有布尔型，也基本都是true、false用法也雷同。真即为True，也可以是1，假即为False同样也可以是0。神奇的是True、False也可以参与运算。。。 12345test = True;if test: # 也可以 test=True: print('结果为真')else: print('结果为假') 123teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ python type.py结果为真 12345678910&gt;&gt;&gt; test = 2+True&gt;&gt;&gt; print(test)3&gt;&gt;&gt; test = 0-True&gt;&gt;&gt; print(test)-1&gt;&gt;&gt; test = 1+True-False+1&gt;&gt;&gt; print(test)3&gt;&gt;&gt; 还可以使用type()来确定一个变量或值得数据类型。 1234567891011121314&gt;&gt;&gt; test = 2+True&gt;&gt;&gt; print(test)3&gt;&gt;&gt; test = 0-True&gt;&gt;&gt; print(test)-1&gt;&gt;&gt; test = 1+True-False+1&gt;&gt;&gt; print(test)3&gt;&gt;&gt; print(type(test))&lt;class 'int'&gt; #整型&gt;&gt;&gt; test = True&gt;&gt;&gt; print(type(test))&lt;class 'bool'&gt; #布尔型 数字(Numbers)Pyhton中将整型、浮点型、以及另外一个complex数字类型统称为数字类型。 12345678910111213&lt;class 'int'&gt;&gt;&gt;&gt; test = 3&gt;&gt;&gt; print(type(test))&lt;class 'int'&gt;&gt;&gt;&gt; test = 3.0&gt;&gt;&gt; print(type(test))&lt;class 'float'&gt;&gt;&gt;&gt; test = 3+1J #在数字后面加KJ或者小写j就可以让这个变量得数据类型变为complex类型&gt;&gt;&gt; print(type(test))&lt;class 'complex'&gt;&gt;&gt;&gt; print(isinstance(test,complex))True&gt;&gt;&gt; 可以用内置isinstance()方法检测对象的数据类型isinstance() 方法的语法: 1isinstance(object, class) object - 实例对象 class - 类名、基本类型等 object的类型与class的参数类型一致，则返回True，否则返回False。 123456&gt;&gt;&gt; test = 3&gt;&gt;&gt; isinstance(test,int)True&gt;&gt;&gt; isinstance(test,str)False&gt;&gt;&gt; 此外，整型是没有大小限制的，浮点型是小数点后面最多跟15位数，这就不试了。 字符串(Strings)被引号括起来的基本都称为字符串。Python中字符串也可以是多行字符串，类似PHP中的字符串拼接吧 123456&gt;&gt;&gt; test = """这是一个字符串... 但是，字符串还可以是多行字符串... 还没结束... """&gt;&gt;&gt; type(test)&lt;class 'str'&gt; 字符串是不可变的，所以变量在赋值之后，内存将重新分配并使用。 1234567&gt;&gt;&gt; test = 3&gt;&gt;&gt; id(test)1770939520&gt;&gt;&gt; demo = test&gt;&gt;&gt; id(demo)1770939520&gt;&gt;&gt; 两个内存地址都为1770939520。 字节(Bytes)字节是Python中的不可变类型。它可以存储一个字节序列（每个8位），范围从0到255。与数组类似，可以使用下标获取对应的值。字节和字符串的区别： 字节对象是一个字节序列，而字符串是存储字符序列。 字节是机器读的，字符串我们可以看得见的。 字节是存在电脑的磁盘中的，而字符串要写入磁盘需要先编码。 123456&gt;&gt;&gt; test = bytes(16)&gt;&gt;&gt; print(type(test))&lt;class 'bytes'&gt; #字节类型&gt;&gt;&gt; print(test)b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' #字节序列&gt;&gt;&gt; 列表(Lists)Python列表是一个类似于构造的数组，它以有序的顺序存储任意类型的对象,索引也是和数组一样从0开始。 123456789101112&gt;&gt;&gt; test = ['abc',123,True,&#123;'a','b'&#125;] #和php一样啊&gt;&gt;&gt; print(type(test))&lt;class 'list'&gt;&gt;&gt;&gt; print(test[0]) #这也一样abc&gt;&gt;&gt; print(test[2])True&gt;&gt;&gt; print(type(test[2]))&lt;class 'bool'&gt;&gt;&gt;&gt; print(type(test[3]))&lt;class 'set'&gt;&gt;&gt;&gt; 列表里面的元素也是可变的 1234&gt;&gt;&gt; test[2] = 'edf'&gt;&gt;&gt; print(test)['abc', 123, 'edf', &#123;'b', 'a'&#125;]&gt;&gt;&gt; list也可以是多个集合，类似二维数组或者多维。。 1234&gt;&gt;&gt; test = [1,2,3,[2,3,4],[4,5,6]]&gt;&gt;&gt; print(test)[1, 2, 3, [2, 3, 4], [4, 5, 6]]&gt;&gt;&gt; 切片列表，就是列表中提取一个元素或一堆元素。类似截取数组中的元素。 12345678&gt;&gt;&gt; print(test)[1, 2, 3, [2, 3, 4], [4, 5, 6, [7, 8]]]&gt;&gt;&gt; print(test[0:1])[1]&gt;&gt;&gt; print(test[0:4])[1, 2, 3, [2, 3, 4]]&gt;&gt;&gt; print(test[1:2])[2] 元组(Tuples)元组是由逗号分隔的Python对象的异构集合。这意味着不同数据类型的对象可以在元组中共存。元组和列表有些相似。 两个对象都是有序序列。 它们可以实现索引和重复。 允许嵌套。 他们可以存储不同类型的值。 元组是用小括号来定义的，其中元素也是用逗号分隔。定义一个空的元组 123456&gt;&gt;&gt; test = ()&gt;&gt;&gt; print(test)()&gt;&gt;&gt; print(type(test))&lt;class 'tuple'&gt;&gt;&gt;&gt; 定义一个多集合的元组 123456&gt;&gt;&gt; test = (1,3,5,7,9)&gt;&gt;&gt; test1 = ('one','two','three','...')&gt;&gt;&gt; merge = (test,test1)&gt;&gt;&gt; print(merge)((1, 3, 5, 7, 9), ('one', 'two', 'three', '...'))&gt;&gt;&gt; 定义一个重复的元组 1234&gt;&gt;&gt; test = (1,2,3) * 2&gt;&gt;&gt; print(test)(1, 2, 3, 1, 2, 3)&gt;&gt;&gt; 元组中的切片 123456789101112&gt;&gt;&gt; test = (1,2,3) * 2&gt;&gt;&gt; print(test)(1, 2, 3, 1, 2, 3)&gt;&gt;&gt; print(test[1:])(2, 3, 1, 2, 3)&gt;&gt;&gt; print(test[::-1])(3, 2, 1, 3, 2, 1)&gt;&gt;&gt; print(test[:-1])(1, 2, 3, 1, 2)&gt;&gt;&gt; print(test[2:3])(3,)&gt;&gt;&gt; []里面的参数都是类似数组的下标，从0开始，截取的时候要注意。 元组与列表的不同元组与列表有所不同，因为它们是不可变的。Python不允许在创建元组后对其进行修改。我们以后不能添加或删除任何元素。相反，Python希望我们使用更新的元素序列创建一个新的元素。可变对象除外。 元组的意义吧 Python使用元组从函数返回多个值。 元组比列表更轻量级。 它作为一个容器来填充多个东西。 集合(Sets)在所有Python数据类型中，该集合是支持并集，交集，对称差异等数学运算的集合。集合是唯一且不可变对象的无序集合，用花括号{}定义，里面也是由逗号分隔。官方文档说，集合类型比列表具有显着优势。它实现了一种高度优化的方法，用于检查容器是否承载特定元素。这里使用的机制基于称为哈希表的数据结构。没看懂。。 集合的创建需要用内置函数set创建，有点实例化对象的赶脚。。 123456789101112&gt;&gt;&gt; test = set('什么是集合？')&gt;&gt;&gt; print(type(test))&lt;class 'set'&gt;&gt;&gt;&gt; print(test)&#123;'合', '集', '什', '？', '么', '是'&#125; #顺序都乱了？&gt;&gt;&gt;&gt;&gt;&gt; test = &#123;'集合是什么鬼？'&#125;&gt;&gt;&gt; print(type(test))&lt;class 'set'&gt;&gt;&gt;&gt; print(test)&#123;'集合是什么鬼？'&#125;&gt;&gt;&gt; 冰冻集合冰冻集合是不可变的，用frozenset()表示。 123456789&gt;&gt;&gt; frozenset()frozenset()&gt;&gt;&gt; test = &#123;'beijing','shanghai','tianjin'&#125;&gt;&gt;&gt; test = frozenset(test)&gt;&gt;&gt; print(type(test))&lt;class 'frozenset'&gt;&gt;&gt;&gt; print(test)frozenset(&#123;'tianjin', 'beijing', 'shanghai'&#125;)&gt;&gt;&gt; 正常集合与冰冻集合的差异 12345678910&gt;&gt;&gt; test = &#123;'beijing','shanghai','tianjin'&#125;&gt;&gt;&gt; print(test)&#123;'tianjin', 'beijing', 'shanghai'&#125;&gt;&gt;&gt; test.add('lundun')&gt;&gt;&gt; print(test)&#123;'tianjin', 'beijing', 'lundun', 'shanghai'&#125;&gt;&gt;&gt; demo = frozenset(['beijing','shanghai','tianjin'])&gt;&gt;&gt; print(demo)frozenset(&#123;'tianjin', 'beijing', 'shanghai'&#125;)&gt;&gt;&gt; 有点像元组，不能随意增减自身的元素，它内部的集合必须是冻结集合对象。 字典(Dictionaries)Python中的字典是键值对的无序集合，字典类型解决了有效存储大数据集的问题。 创建字典12345678&gt;&gt;&gt; test = &#123;'key':'value','name':'zhangsan','sex':18&#125;&gt;&gt;&gt; print(type(test))&lt;class 'dict'&gt;&gt;&gt;&gt; print(test)&#123;'key': 'value', 'name': 'zhangsan', 'sex': 18&#125; #json的赶脚或者类似php的序列化&gt;&gt;&gt; test['name'] #可以利用建来获取对应的值'zhangsan'&gt;&gt;&gt; 字典访问元素的方法 keys（） - 将键值区分，或者叫做获取字典的所有键。 values（） - 这个和上面相反，获取字典的所有值。 items（） -以（键，值）对的列表样式返回项目。 1234567&gt;&gt;&gt; test.keys()dict_keys(['key', 'name', 'sex'])&gt;&gt;&gt; test.values()dict_values(['value', 'zhangsan', 18])&gt;&gt;&gt; test.items()dict_items([('key', 'value'), ('name', 'zhangsan'), ('sex', 18)])&gt;&gt;&gt; 字典里面的对象是可变的，所以可以变化，这个语法好不习惯。。 12345678910&gt;&gt;&gt; test['like'] = 'english'&gt;&gt;&gt; print(test)&#123;'key': 'value', 'name': 'zhangsan', 'sex': 18, 'like': 'english'&#125;&gt;&gt;&gt; test.update(&#123;'name':'lisi'&#125;)&gt;&gt;&gt; print(test)&#123;'key': 'value', 'name': 'lisi', 'sex': 18, 'like': 'english'&#125;&gt;&gt;&gt; del test['key']&gt;&gt;&gt; print(test)&#123;'name': 'lisi', 'sex': 18, 'like': 'english'&#125;&gt;&gt;&gt;]]></content>
      <tags>
        <tag>Python</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python表达式、换行、缩进]]></title>
    <url>%2Fbbbf860f%2F</url>
    <content type="text"><![CDATA[表达式在PHP总的表达式：几乎所写的任何东西都是一个表达式。简单但却最精确的定义一个表达式的方式就是“任何有值的东西”。也就是说基本上所有元素都可以称为一个表达式了。。而在python中：可以求出某个值的语法单元。 换句话说，一个表达式就是表达元素例如字面值、名称、属性访问、运算符或函数调用的汇总，它们最终都会返回一个值。 与许多其他语言不同，并非所有语言构件都是表达式。 还存在不能被用作表达式的 statement，例如 while。 赋值也是属于语句而非表达式。 python表达式中的各种元素： 算术转换、 原子、原型、 await表达式、 幂运算符、 一元算术和位运算、 二元元运算符、 移位运算、 二元位运算、 布尔运算、 条件表达式、 lambda表达式、 表达式列表、 求值顺序、 运算符优先级 我的理解：一个表达式就是由各种元素组成，而它们最终都会返回一个值，所以一个值本身也就是一个表达式？有点蒙。。好，在了解下Python表达式张什么样： 12345678910teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ pythonPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; pow(2,3) #函数表达式8&gt;&gt;&gt; 100+200/100 #使用算术表达式102.0&gt;&gt;&gt; 多行语句换行python里面可以用\来将一个集合分割换行。它区分显式行和隐式行 显式：1234567891011121314151617181920212223242526272829303132&gt;&gt;&gt; test = [1,2,3\] #不可以在一行完整的表达室内换行 File "&lt;stdin&gt;", line 1 test = [1,2,3\] ^SyntaxError: unexpected character after line continuation character&gt;&gt;&gt; test = [1,2,3\ #不可以将一个元素拆分进行换行... 4\ File "&lt;stdin&gt;", line 2 4\ ^SyntaxError: invalid syntax&gt;&gt;&gt; test = [1,2,3\ #正确示例... ,4\... ,5,6,\... 7]&gt;&gt;&gt; print(test)[1, 2, 3, 4, 5, 6, 7]&gt;&gt;&gt;&gt;&gt;&gt; test = ['a',\... 'b','c',\... 'd',\... 'ef','g']&gt;&gt;&gt; print(test)['a', 'b', 'c', 'd', 'ef', 'g']&gt;&gt;&gt;&gt;&gt;&gt; test = 'abc\... ef\... ghijkl\... m'&gt;&gt;&gt; print(test)abcefghijklm&gt;&gt;&gt; 隐式用()、[]、{}括起来换行。 123456789101112131415161718192021&gt;&gt;&gt; test = (2+3 # test = 2+3-1/2+6... -1... /2... +6)&gt;&gt;&gt; print(test)10.5&gt;&gt;&gt;&gt;&gt;&gt; test = ['a'... ,'b','c',... 'd'... ,'ef']&gt;&gt;&gt; print(test)['a', 'b', 'c', 'd', 'ef']&gt;&gt;&gt;&gt;&gt;&gt; test = &#123;'a'... ,'b'... 'c','d'... ,'e',... 'f'&#125;&gt;&gt;&gt; print(test)&#123;'f', 'bc', 'd', 'e', 'a'&#125; 缩进前面提过缩进，今天看到了在学一遍把。python编程风格属实和其他语言有所不同，别人都是用{}来把代码圈起来，Python是用缩进的办法来标记代码块，而且缩进的空格数量是4个。 1234567891011&gt;&gt;&gt; def test_function():... name = input('同你，你叫啥？')... if name == 'python':... print('见到你很高兴',name)... else:... print('见到你好难过',name)... test_function() File "&lt;stdin&gt;", line 7 test_function() ^SyntaxError: invalid syntax #不知道是交互模式下tab缩进问题还是换行问题，还是其他原因，总之放弃在python交互模式下输出了 另外，矫正之前一个错误，退出交互模式exit()即可，不一定加分号。好，回到命令行，将上面的代码保存到.py文件，然后运行 123456teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ python hello.py同学，你叫什么？python见到你很高心， pythonteemitop@DESKTOP-DG4M5KS MINGW64 /d/python 附上代码： 12345678def demo_routine(): name = input('同学，你叫什么？') if name=='python': print('见到你很高心，',name) else: return Falsedemo_routine()]]></content>
      <tags>
        <tag>Python</tag>
        <tag>表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python关键字、标识符、变量]]></title>
    <url>%2F8029f1fe%2F</url>
    <content type="text"><![CDATA[关键字关键字的含义和其他语言都一样：具有特殊含义的特殊字。在python中，所有的关键字都要区分大小写，这一点真的好严谨哦。。 给test变量赋值一个为真的值： 12345&gt;&gt;&gt; test = True #程序未报错&gt;&gt;&gt; test = true #程序报错Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;NameError: name 'true' is not defined 具体他的关键字都是咋写的，python有这么一个统计，在python交互模式下： 12345678910111213&gt;&gt;&gt; help("keywords")Here is a list of the Python keywords. Enter any keyword to get more help.False class from orNone continue global passTrue def if raiseand del import returnas elif in tryassert else is whileasync except lambda withawait finally nonlocal yieldbreak for not 也可以这样： 12345&gt;&gt;&gt; keyword.kwlist['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 如果官方的关键字有变动，去除或者新增，就从新导入即可：&gt;&gt;&gt; import keyword 标识符Python是用户自定义的名称，用来表示变量，函数，类，模块或任何其他对象。Python中标识符的规则：1、标识符的开头不能是数字 123456789101112teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ pythonPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; test=0&gt;&gt;&gt; 0test=0 File "&lt;stdin&gt;", line 1 0test=0 ^SyntaxError: invalid syntax&gt;&gt;&gt; 2、可以是大小写字母+数字+下划线,但是不能有特殊字符 12345678&gt;&gt;&gt; testTes99t_10_wwwZ=000&gt;&gt;&gt; print(testTes99t_10_wwwZ)0&gt;&gt;&gt;&gt;&gt;&gt; blog.slomoo.com@aliyun.com=666 File "&lt;stdin&gt;", line 1SyntaxError: can't assign to operator&gt;&gt;&gt; 3、关键字不能当作标识符 123456&gt;&gt;&gt; for=2 File "&lt;stdin&gt;", line 1 for=2 ^SyntaxError: invalid syntax&gt;&gt;&gt; Python有一个方法可以检测某个标识符是否正确或者说有效，正确返回true，错误返回false 1234&gt;&gt;&gt; 'blog.slomoo.com@aliyun.com'.isidentifier()False&gt;&gt;&gt; 'blog_666slomoo_com_aliyun_com'.isidentifier()True 变量Python中的变量表示一个实体，值可以像PHP的值一样，可以随意赋值，可以覆盖。Python中很奇怪哦，创建一个变量不叫声明，而是叫初始化，难道是因为它存在与内存的原因？ 123456&gt;&gt;&gt; test=0&gt;&gt;&gt; print(test)0&gt;&gt;&gt; test=22&gt;&gt;&gt; print(test)22 如果test不存在则创建，存在则会覆盖。小知识：id()可以查看这个变量在内存中的索引位置 1234567&gt;&gt;&gt; test=0&gt;&gt;&gt; id(test)269771856&gt;&gt;&gt; test=22&gt;&gt;&gt; id(test)269772208&gt;&gt;&gt; 另外，变量也可以是不同的数据类型 12345678910111213&gt;&gt;&gt; test=0&gt;&gt;&gt; type(test)&lt;class 'int'&gt;&gt;&gt;&gt; test='aaa'&gt;&gt;&gt; type(test)&lt;class 'str'&gt;&gt;&gt;&gt; test=2.3&gt;&gt;&gt; type(test)&lt;class 'float'&gt;&gt;&gt;&gt; test=&#123;'php'&#125;&gt;&gt;&gt; type(test)&lt;class 'set'&gt;&gt;&gt;&gt;]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello,Python]]></title>
    <url>%2Fd6c50ec3%2F</url>
    <content type="text"><![CDATA[打卡今天编写第一个Python程序，首先应该知道Python可以是交互式编程（带&gt;&gt;&gt;），也可以是命令行运行.py文件，也就是脚本编程。 基本语法进到Python交互模式，命令行直接python回车： 123456teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ pythonPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; 1&gt;&gt;&gt; print("hello,python") 直接输出 1hello,python 上面的是在python交互模式下写的程序，还有一种就是将所写的代码放在python脚本内，然后命令行值行它。建立hello.py文件，将上面的代码保存，然后在命令行值行这个文件。 123teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ python hello.pyhello,python print() 可以输出任何东西，但如果想要输入，Python提供了一个方法 input(),输入input()并按下回车后，Python交互式命令行就在等待输入了。这时，输入任意字符，然后按回车后完成输入。 123&gt;&gt;&gt; input()test'test' 在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量： 123name="zhangsan" #name就是一个字符串sex=18 #sex就是一个整型... 上面的代码为了好理解点，可以将它赋值给一个变量，即： 1234&gt;&gt;&gt; name = input("你叫什么？");print("hello",name) 回车你叫什么？Python输出：hello Python 同样，也可以将代码保存在Python脚本内运行。 总结：Python语法和其他语言都有很多的相似之处，比如变量命名，变量名必须是大小写英文、数字和_的组合，且不能用数字开头 1234Python：name = "xxxxx";PHP: $name = "xxxx";Java: String name="xxxx";.... 最大的区别就是Python的代码不会用{}标识，而是用缩进的方法来规范，而且这个缩进的大小也是相当严谨哦。。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习日记]]></title>
    <url>%2F7c404c2f%2F</url>
    <content type="text"><![CDATA[为什么要学习?听过这么一句话， 比你优秀的人不可怕，可怕的是比你优秀的人比你更努力。对我而言，这句话同样具有很大的杀伤力。因为不进步，就等于落后。 为什么选择python?火。 安装篇我安装的是目前最新版本Python 3.7.3，传送门，选择 Download Windows x86 executable installer大概25M左右。下载好之后就运行文件，需要勾选Add Python 3.7 to PATH，即配置环境变量，忘记勾选的话就需要手动去配置环境变量了，否则，从新安装即可。然后点“Install Now”即可完成安装。我建议在windows装个 git，不然后面用windows的命令提示符操作好变扭，反正我是用不惯。随便创建一个学习python用的文件夹 D:\python，在这个文件夹下面运行 Git Bash，然后运行 python –version 如果能显示python 版本号，即安装成功。 123teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ python --versionPython 3.7.3 然后在这块儿输出： 123teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ print("hello py")bash: syntax error near unexpected token `"hello py"' 报错，不能这么执行，原因，我们现在是在git的命令行模式，需要开启python的交互模式，如果在windows命令行： 1234C:\Users\teemitop&gt;pythonPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; 出现三个大于号，才进入python交互模式，如果用的是Git Bash，必须通过winpty python 或者python -i进入。如果嫌两个命令有点长，繁琐，可以给给它配置个别名：去D:\Program Files\Git\etc，自行查找，找到这个文件** bash.bashrc** 用编辑器打开，在文末加入 alias python=&#39;winpty python &#39;，然后重新打开 Git Bash，直接运行python 即可进入python交互模式 123456teemitop@DESKTOP-DG4M5KS MINGW64 /d/python$ pythonPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; 退出的时候直接X掉或者exit();后面的括号、分号都不能丢，好严谨哦。。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ocean 中文文档]]></title>
    <url>%2Fe3058817%2F</url>
    <content type="text"><![CDATA[Ocean 是基于 Hexo 默认主题 landscape 的功能，设计的一款支持移动设备的主题，并且集成了 Gitalk 评论功能。 由于我是一枚 Designer 而不是 Coder，所以 欢迎指正！ 如果你喜欢 Ocean 可以 点 这里下载，主题默认使用 Logo 是 Hexo 的 Logo，如果你也喜欢并且想使用我的这个 Shark（小鲨鱼）Logo 的话，那么希望你能给 Ocean 一个 Star，如果你还把页面底部 theme 的作者改为你自己的名字的话，那么更应该给 Ocean 一个 Star 了！ 这里 Clone 了 Markdown 的基本语法在 Ocean 中的展现形式，可能会让你更快速的认知到 Ocean 是否适合你的 Hexo ！ 安装$ git clone https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean 启用目录 theme 中 _config.yml 选择 theme: ocean theme: ocean 更新12$ cd themes/ocean$ git pull 配置默认开启相册与关于菜单，关闭 Gitalk 评论功能，需要的同学 true 就可以了，关于 Gitalk 的使用 过程中遇到各种报错，有同样问题的，或者有兴趣想要了解 Gitalk 可以移步看一看。 Menumenu: 主页: / 归档: /archives 相册: /gallery 关于: /about rss: /atom.xml # Miscellaneous favicon: /favicon.ico brand: /images/hexo.svg # Ocean 主页视频 # 多种格式的视频用于支持不同的浏览器，这里只需要配置好路径，前提是我把视频相关文件统一目录存放。 ocean: overlay: true # 可选，false 则 Ocean 视频下方的笔触式遮盖不显示 path: /images/ocean/ # 视频统一存放路径，格式 mp4/ogg/webm brand: /images/hexo-inverted.svg # 可选，一个小 Logo # 内容 excerpt_link: 阅读全文... share_text: 分享 nav_text: page_prev: 上一页 page_next: 下一页 post_prev: 前一篇 post_next: 后一篇 # fancybox fancybox: true # Local search search_text: 搜索 # Gitalk gitalk: enable: false # 默认关闭评论 开启：true clientID: # 申请 GitHub Application 网页上对应的 Client ID 与 Client Secret 参数 clientSecret: # 同上 repo: # 创建的仓库名称 owner: # Github ID admin: # Github IDOcean 使用了 feathericon 图标库，菜单中的图标定义在“CSS source / css / _partial / navbar.styl”中，可根据需要进行更改或添加。如果你不需要开启相册与关于菜单，需要删除或者注销掉他们的图标，如下边的示例： .nav-item &amp;:nth-child(1) // 主页 .nav-item-link &amp;::before content &apos;\f12f&apos; &amp;:nth-child(2) // 归档 .nav-item-link &amp;::before content &apos;\f12a&apos; //&amp;:nth-child(3) // 相册 // .nav-item-link // &amp;::before // content &apos;\f1a9&apos; //&amp;:nth-child(4) // 关于 // .nav-item-link // &amp;::before // content &apos;\f174&apos;插件 本地搜索 - 使用插件 hexo-generator-search 生成 xml 索引文件。 $ npm install hexo-generator-searchdb --save 然后为 hexo 的配置文件 _config.yml 添加插件配置（注意：不是主题的配置文件，主题配置文件 Ocean 已经配置完成）： # hexo-generator-searchdb@1.0.8 search: path: search.xml field: post format: html content: true RSS - 如果您想启用RSS，还需要 hexo-generate-feed 插件，仅安装即可，Ocean 已经配置完成。 $ npm install hexo-generator-feed --save 文章封面图需要写在 markdown 的 head 部分 title: Post name photos: [ [&quot;img_url&quot;], [&quot;img_url&quot;] ]需要注意的是，这里说的封面图并不是文章配图，文章配图按照 markdown 的语法写就好了！ 相册首先需要创建一个 page ，关于页面也一样需要创建。 $ hexo new page gallery 然后在编辑 markdown 的时候需要写在 head 部分，这种写法可能不是特别特别的好，希望能有更好的方法。 title: Gallery albums: [ [&quot;img_url&quot;,&quot;img_caption&quot;], [&quot;img_url&quot;,&quot;img_caption&quot;] ] ---]]></content>
      <tags>
        <tag>Ocean</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F4a17b156%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Hello</tag>
        <tag>World</tag>
      </tags>
  </entry>
</search>
